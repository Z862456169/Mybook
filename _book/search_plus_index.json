{"./":{"url":"./","title":"Introduction","keywords":"","body":"人生苦短，我用Python！ powered by GitbookFile Modify: 2021-02-10 15:47:32 "},"Python基础/Python基础.html":{"url":"Python基础/Python基础.html","title":"Python基础","keywords":"","body":"Python基础 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/Python简介/Python简介.html":{"url":"Python基础/Python简介/Python简介.html","title":"1.Python简介","keywords":"","body":"1.Python简介 1.计算机 1.1计算机概念 计算机【computer】俗称电脑，是现代一种用于高速计算的电子机器。 1.2计算机组成 计算机由硬件系统与软件系统组成。 计算机硬件系统包含： 运算器：用于进行计算的计算机硬件，包含在CPU内 控制器：用于控制计算机各部件工作，包含在CPU内 存储器：用于存储计算机运行过程中的数据 ​ a. 内存储器：常见内存储器有内存等…… ​ b. 外存储器：常见外存储器有硬盘、移动硬盘、U盘等…… 输入设备：用于向计算机发出指令，常见输入设备有键盘、鼠标、扫描仪、扫描枪、触摸板、手写板等…… 输出设备：用于展示计算机运行结果，常见输出设备有显示器、投影仪、打印机等…… 计算机软件系统包含： 系统软件：与计算机硬件打交道，保障计算机硬件正常工作。 操作系统软件：建立计算机与人之间的交流平台，使人可以控制计算机进行工作。例如：windows、Linux、Unix等…… 应用软件：满足用户特定需求的功能程序。例如：QQ、WORD、飞秋等…… 2. Python语言 2.1 编程语言 ​ 语言是人类最重要的交际工具，是人类之间进行信息交换的主要表达方式。 ​ 编程语言是用来定义计算机程序的语言，用来向计算机发出指令。 2.2 Python语言 ​ Python语言是一种面向对象的解释型计算机程序设计语言。 Python语言创始人为吉多·范罗苏姆（Guido van Rossum） 3. Python语言特点 3.1优点 简单： Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！Python的这种伪代码本质是它最大的优点之一。它使你能够专注于解决问题而不是去搞明白语言本身。 易学: 就如同你即将看到的一样，Python极其容易上手。 免费、开源： Python是FLOSS（自由/开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。FLOSS是基于一个团体分享知识的概念。这是为什么Python如此优秀的原因之一——它是由一群希望看到一个更加优秀的Python的人创造并经常改进着的。 高层语言： 当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。 可移植性： 由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就可以在下述任何平台上面运行。这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE甚至还有PocketPC、Symbian以及Google基于linux开发的Android平台！ 解释性： 这一点需要一些解释。一个用编译性语言比如C或C++写的程序可以从源文件（即C或C++语言）转换到一个你的计算机使用的语言（二进制代码，即0和1）。这个过程通过编译器和不同的标记、选项完成。当你运行你的程序的时候，连接/转载器软件把你的程序从硬盘复制到内存中并且运行。而Python语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。事实上，由于你不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用Python更加简单。由于你只需要把你的Python程序拷贝到另外一台计算机上，它就可以工作了，这也使得你的Python程序更加易于移植。 面向对象： Python既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如C++和Java相比，Python以一种非常强大又简单的方式实现面向对象编程。 可扩展性： 如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。 丰富的库： Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。 规范的代码： Python采用强制缩进的方式使得代码具有极佳的可读性。 3.2缺点 运行速度慢： 如果对速度有要求的话，建议使用C++改写关键部分。 国内市场较小： 国内以python来做主要开发的，目前只有一些web2.0公司。但时间推移，目前很多国内软件公司，尤其是游戏公司，也开始规模使用他。 中文资料匮乏： 托社区的福，有几本优秀的教材已经被翻译了，但入门级教材多，高级内容还是只能看英语版。 构架选择太多： 没有像C#这样的官方.net构架，也没有像ruby由于历史较短，构架开发的相对集中。Ruby on Rails 构架开发中小型web程序天下无敌。不过这也从另一个侧面说明，python比较优秀，吸引的人才多，项目也多。 powered by GitbookFile Modify: 2021-02-20 16:48:23 "},"Python基础/第一个程序/第一个程序.html":{"url":"Python基础/第一个程序/第一个程序.html","title":"2.第一个程序","keywords":"","body":"2.第一个程序 1.第一个程序 1.1 Hello Python书写步骤 ​ 步骤一：新建文本文档文件,修改名称为hello.py ​ 步骤二：使用记事本打开文件，书写程序内容如下： ​ 步骤三：打开命令行，输入执行指令：python hello.py ​ 运行结果：屏幕显示hello python 1.2 Bug 软件的Bug，是指软件程序的漏洞或缺陷。 针对BUG具有如下能力： 1.具备识别BUG的能力：多看 2.具备分析BUG的能力：多思考、多查阅资料 3.具备解决BUG的能力：多尝试、多查阅资料、多记录/记忆 1.3 hello python常见问题 错误类型：输入错误 原因分析：将字符输入错误引发的错误 解决方案：检查对应位置拼写内容是否正确 错误类型：缩进错误 原因分析：代码行前面添加了多余的空格引发的错误 解决方案：检查对应位置行首是否存在多余的空格 错误类型：语法错误 原因分析：代码行中是否存在非法的python语法格式 解决方案：检查对应位置语法输入是否有误 2.PyCharm 2.1 PyCharm介绍 ​ PyCharm是一种Python IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具。 2.2 PyCharm主界面 ​ PyCharm包含4个主要区分，分别为菜单工具栏、项目结构区、代码区、信息显示区。 ​ 2.3PyCharm项目管理 ​ 创建新项目管理 ​ 步骤一：启动界面中选择【Create New Project】 ​ ​ 步骤二：new Project窗口中选择【Pure Python】 ​ 步骤三：Location路径中输入项目保存位置路径 ​ 步骤四：点击【Create】完成创建新项目工作 ​ ​ 同一窗口打开单个项目 ​ 步骤一：主界面中选择【File】菜单中的【Open】选项 ​ ​ 步骤二：Open File or Project窗口中选择要打开的项目目录，并单击【OK】按钮 ​ ​ 步骤三：Open Project窗口中选择【Open in current window】选项，并单击【OK】按钮 ​ ​ 同一窗口打开多个项目 ​ 步骤一：主界面中选择【File】菜单中的【Open】选项 ​ ​ 步骤二：Open File or Project窗口中选择要打开的项目目录，并单击【OK】按钮 ​ ​ 步骤三：Open Project窗口中选择【Open in current window】选项，勾选【Add to currently opened Projects】选项，并单击【OK】按钮 ​ ​ 不同窗口打开项目 ​ 步骤一：主界面中选择【File】菜单中的【Open】选项 ​ ​ 步骤二：Open File or Project窗口中选择要打开的项目目录，并单击【OK】按钮 ​ ​ 步骤三：Open Project窗口中选择【Open in new window】选项，并单击【OK】按钮 ​ 2.4 PyCharm源文件管理 ​ 创建新python程序源文件 ​ 步骤一：项目结构区任意位置右键单击鼠标 ​ ​ 步骤二：弹出菜单中选择【New】选项中的【Python File】选项 ​ ​ 步骤三：New Python file窗口中输入文件名，，并单击【OK】按钮 ​ 2.5 PyCharm Debug调试程序 ​ 步骤一：在代码区要进行调试的代码行左侧单击鼠标左键，添加调试断点符号 ​ ​ 步骤二：右键单击源文件或代码区内部，弹出菜单，选择【Debug *】 ​ ​ 或在右上角工具栏区单击【debug】按钮，快捷键【shift+F9】 ​ ​ 步骤三：在Debug窗口中单击【Step Over】键进行程序单步执行，快键键【F8】，单击左侧绿色【Resumn program】键放行程序向下执行，快捷键【F9】 ​ powered by GitbookFile Modify: 2021-02-20 17:22:17 "},"Python基础/Python基础语法/Python基础语法.html":{"url":"Python基础/Python基础语法/Python基础语法.html","title":"3.Python基础语法","keywords":"","body":"3.Python基础语法 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/标准输入输出/标准输入输出.html":{"url":"Python基础/标准输入输出/标准输入输出.html","title":"4.标准输入输出","keywords":"","body":"4.标准输入输出 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/分支语句/分支语句.html":{"url":"Python基础/分支语句/分支语句.html","title":"5.分支语句","keywords":"","body":"5.分支语句 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/while循环语句/while循环语句.html":{"url":"Python基础/while循环语句/while循环语句.html","title":"6.while循环语句","keywords":"","body":"6.while循环语句 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/函数/函数.html":{"url":"Python基础/函数/函数.html","title":"7.函数","keywords":"","body":"7.函数 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/面向对象/面向对象.html":{"url":"Python基础/面向对象/面向对象.html","title":"8.面向对象","keywords":"","body":"8.面向对象 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/继承/继承.html":{"url":"Python基础/继承/继承.html","title":"9.继承","keywords":"","body":"9.继承 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/数据存储/数据存储.html":{"url":"Python基础/数据存储/数据存储.html","title":"10.数据存储","keywords":"","body":"10.数据存储 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/字符串/字符串.html":{"url":"Python基础/字符串/字符串.html","title":"11.字符串","keywords":"","body":"11.字符串 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/函数高级/函数高级.html":{"url":"Python基础/函数高级/函数高级.html","title":"12.函数高级","keywords":"","body":"12.函数高级 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/引用/引用.html":{"url":"Python基础/引用/引用.html","title":"13.引用","keywords":"","body":"13.引用 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/对象管理/对象管理.html":{"url":"Python基础/对象管理/对象管理.html","title":"14.对象管理","keywords":"","body":"14.对象管理 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/文件/文件.html":{"url":"Python基础/文件/文件.html","title":"15.文件","keywords":"","body":"15.文件 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/异常处理/异常处理.html":{"url":"Python基础/异常处理/异常处理.html","title":"16.异常处理","keywords":"","body":"16.异常处理 powered by GitbookFile Modify: 2021-02-10 15:44:16 "},"Python基础/模块与包/模块与包.html":{"url":"Python基础/模块与包/模块与包.html","title":"17.模块与包","keywords":"","body":"17.模块与包 powered by GitbookFile Modify: 2021-02-10 15:44:16 "}}